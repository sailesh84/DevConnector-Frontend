Dev Connector: Get all Profile & Profile by User ID
---------------------------------------------------
Folder Structure:
DevConnector_Backend_App
-models
	|-User.js
	|-Profile.js
-routes
	|-api
	   |-user.js
	   |-auth.js
	   |-profile.js
	   |-posts.js
-config
	|-db.js
	|-default.json
-node_modules
-package.json
-server.js //Entry Point


In routes/api/profile.js
==================================
const express = require('express');
const router = express.Router();
const auth = require('../../middleware/auth');
const { check, validationResult } = require('express-validator');

const Profile = require('../../models/Profile');
const User = require('../../models/User');


// route:       GET api/profile/me
// description: Get current user profile
// access:      PRIVATE 
router.get('/me', auth, async (res, req) => {
    try {
        const profile = await Profile.findOne({ user: req.user.id }).populate('user', ['name', 'avatar']);

        if(!profile) {
            return res.status(400).json({ msg: 'There is no profile for this user' });
        }



    } catch(err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       POST api/profile
// description: Create or Update user profile
// access:      PRIVATE 
router.post('/', [auth, [
    check('status', 'Status is required').not().isEmpty()
    check('skills', 'Skills is required').not().isEmpty()
]], 
async (req, res) => {

    // 1: Check for the body errors.
    const errors = validationResult(req);
    if(!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    // 2: Pull out everthing from the body
    const {
        company,
        website,
        location,
        bio,
        status,
        githubusername,
        skills,
        youtube,
        facebook,
        twitter,
        instagram,
        linkedin
    } = req.body;

    // 3: Build profile object
    const profileFields = {};
    profileFields.user = req.user.id;
    if(company) profileFields.company = company;
    if(website) profileFields.website = website;
    if(location) profileFields.location = location;
    if(bio) profileFields.bio = bio;
    if(status) profileFields.status = status;
    if(githubusername) profileFields.githubusername = githubusername;
    if(skills) {
        profileFields.skills = skills.split(',').map(skill => skill.trim());
    }

    // 4: Build social object
    profileFields.social = {}
    if(youtube) profileFields.social = youtube;
    if(twitter) profileFields.social.twitter = twitter;
    if(facebook) profileFields.social.facebook = facebook;
    if(linkedin) profileFields.social.linkedin = linkedin;
    if(instagram) profileFields.social.instagram = instagram;

    try {
        // 5: Find profile for the user
        let profile = Profile.findOne({ user: req.user.id });

        if(profile) {
            // 6: If profile found, then Update it
            profile = await Profile.findOneAndUpdate(
                { user: req.user.id }, 
                { $set: profileFields },
                { new: true }
            );
            return res.json(profile);
        }

        // 7: If profile not found, then Create it.
        profile = new Profile(profileFields);
        await profile.save();
        res.json(profile);

    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       GET api/profile
// description: Get all profiles
// access:      PUBLIC
router.get('/', async (req, res) => {
    try {
        const profiles = await Profile.find().populate('user', ['name', 'avatar']);
        res.json(profiles);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       GET api/profile/user/:user_id
// description: Get profile by user_id
// access:      PUBLIC
router.get('/user/:user_id', async (req, res) => {
    try {
        const profile = await Profile.findOne({ user: req.params.user_id }).populate('user', ['name', 'avatar']);

        if(!profile) return res.status(400).json({ msg: 'There is no profile for this user' });

        res.json(profiles);
    } catch (err) {
        console.error(err.message);
        if(err.kind == 'ObjectId') {
            return res.status(400).json({ msg: 'Profile not found' });
        }
        res.status(500).send('Server Error');
    }
});


module.exports = router;



Result: Get all profiles
--------------------------------------------
API: http://localhost:3000/api/profile
METHOD: GET
RESPONSE:
[
  {
    "social": {
      "youtube": "https://www.youtube.com/traversymedia",
      "twitter": "https://www.twitter.com/traversymedia",
      "facebook": "https://www.facebook.com/traversymedia"
    },
    "skills": [
      "HTML",
      "CSS",
      "JS",
      "PHP",
      "Ruby"
    ],
    "_id": "262068df6962516b7e8cae21d",
    "user": {
      "_id": "179b8cd58263183a085c14e2d",
      "name": "Brad Traversy",
      "avatar": "//www.gravatar.com/avatar/262068df6962516b7e8cae21d"
    },
    "company": "Traversy Media",
    "website": "https://www.traversymedia.com/",
    "location": "Boston MA",
    "bio": "I'm a developer and instructor for Traversy Media",
    "status": "Instructor",
    "githubusername": "bradtraversy",
    "experience": [],
    "education": [],
    "date": "2024-04-16723:17:10:7422",
    "__v": 0
  }
]


Result: Get profile by user_id:
------------------------------------------------------------------
API: http://localhost:3000/api/profile/262068df6962516b7e8cae21d
METHOD: GET
RESPONSE:
{
    "social": {
      "youtube": "https://www.youtube.com/traversymedia",
      "twitter": "https://www.twitter.com/traversymedia",
      "facebook": "https://www.facebook.com/traversymedia"
    },
    "skills": [
      "HTML",
      "CSS",
      "JS",
      "PHP",
      "Ruby"
    ],
    "_id": "262068df6962516b7e8cae21d",
    "user": {
      "_id": "179b8cd58263183a085c14e2d",
      "name": "Brad Traversy",
      "avatar": "//www.gravatar.com/avatar/262068df6962516b7e8cae21d"
    },
    "company": "Traversy Media",
    "website": "https://www.traversymedia.com/",
    "location": "Boston MA",
    "bio": "I'm a developer and instructor for Traversy Media",
    "status": "Instructor",
    "githubusername": "bradtraversy",
    "experience": [],
    "education": [],
    "date": "2024-04-16723:17:10:7422",
    "__v": 0
}


Result: Get profile by wrong user_id
-------------------------------------
API: http://localhost:3000/api/profile/262068df6962516b7e8cae21d
METHOD: GET
RESPONSE:
{
  "msg": "There is no profile for this user"
}