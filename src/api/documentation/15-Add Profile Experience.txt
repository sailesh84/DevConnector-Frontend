Dev Connector: Add Profile Experience
-------------------------------------
Folder Structure:
DevConnector_Backend_App
-models
	|-User.js
	|-Profile.js
-routes
	|-api
	   |-user.js
	   |-auth.js
	   |-profile.js
	   |-posts.js
-config
	|-db.js
	|-default.json
-node_modules
-package.json
-server.js //Entry Point


In routes/api/profile.js
==================================
aconst express = require('express');
const router = express.Router();
const auth = require('../../middleware/auth');
const { check, validationResult } = require('express-validator');

const Profile = require('../../models/Profile');
const User = require('../../models/User');


// route:       GET api/profile/me
// description: Get current user profile
// access:      PRIVATE 
router.get('/me', auth, async (res, req) => {
    try {
        const profile = await Profile.findOne({ user: req.user.id }).populate('user', ['name', 'avatar']);

        if(!profile) {
            return res.status(400).json({ msg: 'There is no profile for this user' });
        }



    } catch(err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       POST api/profile
// description: Create or Update user profile
// access:      PRIVATE 
router.post('/', [auth, [
    check('status', 'Status is required').not().isEmpty(),
    check('skills', 'Skills is required').not().isEmpty()
]], 
async (req, res) => {

    // 1: Check for the body errors.
    const errors = validationResult(req);
    if(!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    // 2: Pull out everthing from the body
    const {
        company,
        website,
        location,
        bio,
        status,
        githubusername,
        skills,
        youtube,
        facebook,
        twitter,
        instagram,
        linkedin
    } = req.body;

    // 3: Build profile object
    const profileFields = {};
    profileFields.user = req.user.id;
    if(company) profileFields.company = company;
    if(website) profileFields.website = website;
    if(location) profileFields.location = location;
    if(bio) profileFields.bio = bio;
    if(status) profileFields.status = status;
    if(githubusername) profileFields.githubusername = githubusername;
    if(skills) {
        profileFields.skills = skills.split(',').map(skill => skill.trim());
    }

    // 4: Build social object
    profileFields.social = {}
    if(youtube) profileFields.social = youtube;
    if(twitter) profileFields.social.twitter = twitter;
    if(facebook) profileFields.social.facebook = facebook;
    if(linkedin) profileFields.social.linkedin = linkedin;
    if(instagram) profileFields.social.instagram = instagram;

    try {
        // 5: Find profile for the user
        let profile = Profile.findOne({ user: req.user.id });

        if(profile) {
            // 6: If profile found, then Update it
            profile = await Profile.findOneAndUpdate(
                { user: req.user.id }, 
                { $set: profileFields },
                { new: true }
            );
            return res.json(profile);
        }

        // 7: If profile not found, then Create it.
        profile = new Profile(profileFields);
        await profile.save();
        res.json(profile);

    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       GET api/profile
// description: Get all profiles
// access:      PUBLIC
router.get('/', async (req, res) => {
    try {
        const profiles = await Profile.find().populate('user', ['name', 'avatar']);
        res.json(profiles);
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       GET api/profile/user/:user_id
// description: Get profile by user_id
// access:      PUBLIC
router.get('/user/:user_id', async (req, res) => {
    try {
        const profile = await Profile.findOne({ user: req.params.user_id }).populate('user', ['name', 'avatar']);

        if(!profile) return res.status(400).json({ msg: 'There is no profile for this user' });

        res.json(profiles);
    } catch (err) {
        console.error(err.message);
        if(err.kind == 'ObjectId') {
            return res.status(400).json({ msg: 'Profile not found' });
        }
        res.status(500).send('Server Error');
    }
});


// route:       DELETE api/profile
// description: Delete profile, user & posts
// access:      PUBLIC
router.delete('/', auth, async (req, res) => {
    try {
        // Remove profile
        await Profile.findOneAndRemove({ user: req.user.id });
        
        // Remove user
        await User.findOneAndRemove({ _id: req.user.id });

        res.json({ msg: 'User deleted' });
    } catch (err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }
});


// route:       PUT api/profile/experience
// description: Add profile experience
// access:      PRIVATE
router.put('/experience', [auth, [
    check('title', 'Title is required').not().isEmpty(),
    check('company', 'Company is required').not().isEmpty(),
    check('from', 'From date is required').not().isEmpty(),
]], 
async (req, res) => {
    const errors = validationResult(req);
    if(!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const {
        title,
        company,
        location,
        from,
        to,
        current,
        description
    } = req.body;


    const newExp = {
        title,
        company,
        location,
        from,
        to,
        current,
        description
    }

    try{
        const profile = await Profile.findOne({ user: req.user.id });
        profile.experience.unshift(newExp);
        await profile.save();
        res.json(profile);

    } catch(err) {
        console.error(err.message);
        res.status(500).send('Server Error');
    }

});


module.exports = router;


Result: Add profile experience object
--------------------------------------
API: http://localhost:3000/api/profile/experience
METHOD: PUT
HEADER:
{
  "x-auth-token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
  eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.
  SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5cdd"
}

BODY: 
{
  "title": "Instructor & Senior Developer",
  "company": "Traversy Media",
  "location": "Boston MA",
  "from": "08-10-2024",
  "current": true,
  "description": "Create projects and courses on web development"
}

RESPONSE:
{
  "skills": [
    "HTML",
    "CSS",
    "JS",
    "PHP",
    "Ruby"
  ],
  "_id": "262068df6962516b7e8cae21d",
  "user": "179b8cd58263183a085c14e2d",
  "company": "Traversy Media",
  "website": "https://www.traversymedia.com/",
  "location": "Boston MA",
  "bio": "I'm a developer and instructor for Traversy Media",
  "status": "Instructor",
  "githubusername": "bradtraversy",
  "social": {
    "youtube": "https://www.youtube.com/traversymedia",
    "twitter": "https://www.twitter.com/traversymedia",
    "facebook": "https://www.facebook.com/traversymedia"
  },
  "experience": [
    {
      "title": "Instructor & Senior Developer",
      "company": "Traversy Media",
      "location": "Boston MA",
      "from": "08-10-2024",
      "current": true,
      "_id": "8afa64d329171a481a3206f86",
      "description": "Create projects and courses on web development"
    }
  ],
  "education": [],
  "date": "2024-04-16723:17:10:7422",
  "__v": 0
}